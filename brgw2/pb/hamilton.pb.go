// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hamilton.proto

package pb

/*
This is designed to be included by the main xbos proto file and includes the
definitions for the Hamilton project

Version 1.0
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Data emitted from Hamilton Sensors
// Maintainer: Michael Andersen
type HamiltonData struct {
	Serial               uint32      `protobuf:"varint,1,opt,name=serial,proto3" json:"serial,omitempty"`
	Model                string      `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Time                 uint64      `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	H3C                  *Hamilton3C `protobuf:"bytes,4,opt,name=h3c,proto3" json:"h3c,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HamiltonData) Reset()         { *m = HamiltonData{} }
func (m *HamiltonData) String() string { return proto.CompactTextString(m) }
func (*HamiltonData) ProtoMessage()    {}
func (*HamiltonData) Descriptor() ([]byte, []int) {
	return fileDescriptor_hamilton_067f4b6462872676, []int{0}
}
func (m *HamiltonData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HamiltonData.Unmarshal(m, b)
}
func (m *HamiltonData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HamiltonData.Marshal(b, m, deterministic)
}
func (dst *HamiltonData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HamiltonData.Merge(dst, src)
}
func (m *HamiltonData) XXX_Size() int {
	return xxx_messageInfo_HamiltonData.Size(m)
}
func (m *HamiltonData) XXX_DiscardUnknown() {
	xxx_messageInfo_HamiltonData.DiscardUnknown(m)
}

var xxx_messageInfo_HamiltonData proto.InternalMessageInfo

func (m *HamiltonData) GetSerial() uint32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *HamiltonData) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *HamiltonData) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HamiltonData) GetH3C() *Hamilton3C {
	if m != nil {
		return m.H3C
	}
	return nil
}

// Data specific to a Hamilton 3C/7C sensor
// Maintainer: Michael Andersen
type Hamilton3C struct {
	Uptime               uint64   `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Flags                uint32   `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	AccX                 float64  `protobuf:"fixed64,3,opt,name=acc_x,json=accX,proto3" json:"acc_x,omitempty"`
	AccY                 float64  `protobuf:"fixed64,4,opt,name=acc_y,json=accY,proto3" json:"acc_y,omitempty"`
	AccZ                 float64  `protobuf:"fixed64,5,opt,name=acc_z,json=accZ,proto3" json:"acc_z,omitempty"`
	MagX                 float64  `protobuf:"fixed64,6,opt,name=mag_x,json=magX,proto3" json:"mag_x,omitempty"`
	MagY                 float64  `protobuf:"fixed64,7,opt,name=mag_y,json=magY,proto3" json:"mag_y,omitempty"`
	MagZ                 float64  `protobuf:"fixed64,8,opt,name=mag_z,json=magZ,proto3" json:"mag_z,omitempty"`
	TmpDie               float64  `protobuf:"fixed64,9,opt,name=tmp_die,json=tmpDie,proto3" json:"tmp_die,omitempty"`
	TmpVoltage           float64  `protobuf:"fixed64,10,opt,name=tmp_voltage,json=tmpVoltage,proto3" json:"tmp_voltage,omitempty"`
	AirTemp              float64  `protobuf:"fixed64,11,opt,name=air_temp,json=airTemp,proto3" json:"air_temp,omitempty"`
	AirHum               float64  `protobuf:"fixed64,12,opt,name=air_hum,json=airHum,proto3" json:"air_hum,omitempty"`
	AirRh                float64  `protobuf:"fixed64,13,opt,name=air_rh,json=airRh,proto3" json:"air_rh,omitempty"`
	LightLux             float64  `protobuf:"fixed64,14,opt,name=light_lux,json=lightLux,proto3" json:"light_lux,omitempty"`
	Buttons              uint32   `protobuf:"varint,15,opt,name=buttons,proto3" json:"buttons,omitempty"`
	Occupancy            float64  `protobuf:"fixed64,16,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hamilton3C) Reset()         { *m = Hamilton3C{} }
func (m *Hamilton3C) String() string { return proto.CompactTextString(m) }
func (*Hamilton3C) ProtoMessage()    {}
func (*Hamilton3C) Descriptor() ([]byte, []int) {
	return fileDescriptor_hamilton_067f4b6462872676, []int{1}
}
func (m *Hamilton3C) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hamilton3C.Unmarshal(m, b)
}
func (m *Hamilton3C) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hamilton3C.Marshal(b, m, deterministic)
}
func (dst *Hamilton3C) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hamilton3C.Merge(dst, src)
}
func (m *Hamilton3C) XXX_Size() int {
	return xxx_messageInfo_Hamilton3C.Size(m)
}
func (m *Hamilton3C) XXX_DiscardUnknown() {
	xxx_messageInfo_Hamilton3C.DiscardUnknown(m)
}

var xxx_messageInfo_Hamilton3C proto.InternalMessageInfo

func (m *Hamilton3C) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Hamilton3C) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Hamilton3C) GetAccX() float64 {
	if m != nil {
		return m.AccX
	}
	return 0
}

func (m *Hamilton3C) GetAccY() float64 {
	if m != nil {
		return m.AccY
	}
	return 0
}

func (m *Hamilton3C) GetAccZ() float64 {
	if m != nil {
		return m.AccZ
	}
	return 0
}

func (m *Hamilton3C) GetMagX() float64 {
	if m != nil {
		return m.MagX
	}
	return 0
}

func (m *Hamilton3C) GetMagY() float64 {
	if m != nil {
		return m.MagY
	}
	return 0
}

func (m *Hamilton3C) GetMagZ() float64 {
	if m != nil {
		return m.MagZ
	}
	return 0
}

func (m *Hamilton3C) GetTmpDie() float64 {
	if m != nil {
		return m.TmpDie
	}
	return 0
}

func (m *Hamilton3C) GetTmpVoltage() float64 {
	if m != nil {
		return m.TmpVoltage
	}
	return 0
}

func (m *Hamilton3C) GetAirTemp() float64 {
	if m != nil {
		return m.AirTemp
	}
	return 0
}

func (m *Hamilton3C) GetAirHum() float64 {
	if m != nil {
		return m.AirHum
	}
	return 0
}

func (m *Hamilton3C) GetAirRh() float64 {
	if m != nil {
		return m.AirRh
	}
	return 0
}

func (m *Hamilton3C) GetLightLux() float64 {
	if m != nil {
		return m.LightLux
	}
	return 0
}

func (m *Hamilton3C) GetButtons() uint32 {
	if m != nil {
		return m.Buttons
	}
	return 0
}

func (m *Hamilton3C) GetOccupancy() float64 {
	if m != nil {
		return m.Occupancy
	}
	return 0
}

// Published by Hamilton Border routers periodically
type HamiltonBRLinkStats struct {
	BadFrames            uint64   `protobuf:"varint,1,opt,name=BadFrames,proto3" json:"BadFrames,omitempty"`
	LostFrames           uint64   `protobuf:"varint,2,opt,name=LostFrames,proto3" json:"LostFrames,omitempty"`
	DropNotConnected     uint64   `protobuf:"varint,3,opt,name=DropNotConnected,proto3" json:"DropNotConnected,omitempty"`
	SumSerialReceived    uint64   `protobuf:"varint,4,opt,name=SumSerialReceived,proto3" json:"SumSerialReceived,omitempty"`
	SumDomainForwarded   uint64   `protobuf:"varint,5,opt,name=SumDomainForwarded,proto3" json:"SumDomainForwarded,omitempty"`
	SumDropNotConnected  uint64   `protobuf:"varint,6,opt,name=SumDropNotConnected,proto3" json:"SumDropNotConnected,omitempty"`
	SumDomainReceived    uint64   `protobuf:"varint,7,opt,name=SumDomainReceived,proto3" json:"SumDomainReceived,omitempty"`
	SumSerialForwarded   uint64   `protobuf:"varint,8,opt,name=SumSerialForwarded,proto3" json:"SumSerialForwarded,omitempty"`
	PublishOkay          uint64   `protobuf:"varint,9,opt,name=PublishOkay,proto3" json:"PublishOkay,omitempty"`
	PublishError         uint64   `protobuf:"varint,10,opt,name=PublishError,proto3" json:"PublishError,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HamiltonBRLinkStats) Reset()         { *m = HamiltonBRLinkStats{} }
func (m *HamiltonBRLinkStats) String() string { return proto.CompactTextString(m) }
func (*HamiltonBRLinkStats) ProtoMessage()    {}
func (*HamiltonBRLinkStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_hamilton_067f4b6462872676, []int{2}
}
func (m *HamiltonBRLinkStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HamiltonBRLinkStats.Unmarshal(m, b)
}
func (m *HamiltonBRLinkStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HamiltonBRLinkStats.Marshal(b, m, deterministic)
}
func (dst *HamiltonBRLinkStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HamiltonBRLinkStats.Merge(dst, src)
}
func (m *HamiltonBRLinkStats) XXX_Size() int {
	return xxx_messageInfo_HamiltonBRLinkStats.Size(m)
}
func (m *HamiltonBRLinkStats) XXX_DiscardUnknown() {
	xxx_messageInfo_HamiltonBRLinkStats.DiscardUnknown(m)
}

var xxx_messageInfo_HamiltonBRLinkStats proto.InternalMessageInfo

func (m *HamiltonBRLinkStats) GetBadFrames() uint64 {
	if m != nil {
		return m.BadFrames
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetLostFrames() uint64 {
	if m != nil {
		return m.LostFrames
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetDropNotConnected() uint64 {
	if m != nil {
		return m.DropNotConnected
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumSerialReceived() uint64 {
	if m != nil {
		return m.SumSerialReceived
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumDomainForwarded() uint64 {
	if m != nil {
		return m.SumDomainForwarded
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumDropNotConnected() uint64 {
	if m != nil {
		return m.SumDropNotConnected
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumDomainReceived() uint64 {
	if m != nil {
		return m.SumDomainReceived
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetSumSerialForwarded() uint64 {
	if m != nil {
		return m.SumSerialForwarded
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetPublishOkay() uint64 {
	if m != nil {
		return m.PublishOkay
	}
	return 0
}

func (m *HamiltonBRLinkStats) GetPublishError() uint64 {
	if m != nil {
		return m.PublishError
	}
	return 0
}

// Published by Hamilton Border routers for each message
type HamiltonBRMessage struct {
	SrcMAC               string   `protobuf:"bytes,1,opt,name=SrcMAC,proto3" json:"SrcMAC,omitempty"`
	SrcIP                string   `protobuf:"bytes,2,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	PopID                string   `protobuf:"bytes,3,opt,name=PopID,proto3" json:"PopID,omitempty"`
	PopTime              int64    `protobuf:"varint,4,opt,name=PopTime,proto3" json:"PopTime,omitempty"`
	BRTime               int64    `protobuf:"varint,5,opt,name=BRTime,proto3" json:"BRTime,omitempty"`
	RSSI                 int32    `protobuf:"varint,6,opt,name=RSSI,proto3" json:"RSSI,omitempty"`
	LQI                  int32    `protobuf:"varint,7,opt,name=LQI,proto3" json:"LQI,omitempty"`
	Payload              []byte   `protobuf:"bytes,8,opt,name=Payload,proto3" json:"Payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HamiltonBRMessage) Reset()         { *m = HamiltonBRMessage{} }
func (m *HamiltonBRMessage) String() string { return proto.CompactTextString(m) }
func (*HamiltonBRMessage) ProtoMessage()    {}
func (*HamiltonBRMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_hamilton_067f4b6462872676, []int{3}
}
func (m *HamiltonBRMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HamiltonBRMessage.Unmarshal(m, b)
}
func (m *HamiltonBRMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HamiltonBRMessage.Marshal(b, m, deterministic)
}
func (dst *HamiltonBRMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HamiltonBRMessage.Merge(dst, src)
}
func (m *HamiltonBRMessage) XXX_Size() int {
	return xxx_messageInfo_HamiltonBRMessage.Size(m)
}
func (m *HamiltonBRMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HamiltonBRMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HamiltonBRMessage proto.InternalMessageInfo

func (m *HamiltonBRMessage) GetSrcMAC() string {
	if m != nil {
		return m.SrcMAC
	}
	return ""
}

func (m *HamiltonBRMessage) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *HamiltonBRMessage) GetPopID() string {
	if m != nil {
		return m.PopID
	}
	return ""
}

func (m *HamiltonBRMessage) GetPopTime() int64 {
	if m != nil {
		return m.PopTime
	}
	return 0
}

func (m *HamiltonBRMessage) GetBRTime() int64 {
	if m != nil {
		return m.BRTime
	}
	return 0
}

func (m *HamiltonBRMessage) GetRSSI() int32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *HamiltonBRMessage) GetLQI() int32 {
	if m != nil {
		return m.LQI
	}
	return 0
}

func (m *HamiltonBRMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*HamiltonData)(nil), "proto.HamiltonData")
	proto.RegisterType((*Hamilton3C)(nil), "proto.Hamilton3C")
	proto.RegisterType((*HamiltonBRLinkStats)(nil), "proto.HamiltonBRLinkStats")
	proto.RegisterType((*HamiltonBRMessage)(nil), "proto.HamiltonBRMessage")
}

func init() { proto.RegisterFile("hamilton.proto", fileDescriptor_hamilton_067f4b6462872676) }

var fileDescriptor_hamilton_067f4b6462872676 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xff, 0x6e, 0xd3, 0x30,
	0x10, 0xc7, 0x95, 0x35, 0xe9, 0x8f, 0x6b, 0x37, 0x36, 0x0f, 0x86, 0x11, 0x08, 0xaa, 0xf2, 0x4f,
	0x85, 0xd0, 0x84, 0xd8, 0x13, 0xb0, 0x95, 0x69, 0x95, 0x3a, 0x28, 0xce, 0x84, 0xb6, 0xfd, 0x53,
	0x79, 0xa9, 0x69, 0xad, 0xc5, 0x71, 0xe4, 0x38, 0xa3, 0xdd, 0x63, 0xf0, 0x2a, 0x3c, 0x05, 0x6f,
	0x85, 0x7c, 0x49, 0xda, 0xfd, 0xfa, 0x2b, 0xfe, 0x7e, 0xbe, 0xf2, 0xdd, 0xe9, 0xee, 0x1c, 0xd8,
	0x9a, 0x73, 0x25, 0x63, 0xab, 0x93, 0xfd, 0xd4, 0x68, 0xab, 0x49, 0x80, 0x9f, 0x5e, 0x0e, 0x9d,
	0x93, 0xd2, 0x18, 0x70, 0xcb, 0xc9, 0x1e, 0xd4, 0x33, 0x61, 0x24, 0x8f, 0xa9, 0xd7, 0xf5, 0xfa,
	0x9b, 0xac, 0x54, 0xe4, 0x39, 0x04, 0x4a, 0x4f, 0x45, 0x4c, 0x37, 0xba, 0x5e, 0xbf, 0xc5, 0x0a,
	0x41, 0x08, 0xf8, 0x56, 0x2a, 0x41, 0x6b, 0x5d, 0xaf, 0xef, 0x33, 0x3c, 0x93, 0xf7, 0x50, 0x9b,
	0x1f, 0x44, 0xd4, 0xef, 0x7a, 0xfd, 0xf6, 0xe7, 0x9d, 0x22, 0xdb, 0x7e, 0x95, 0xe3, 0xe0, 0x88,
	0x39, 0xb7, 0xf7, 0xa7, 0x06, 0xb0, 0x66, 0x2e, 0x6b, 0x9e, 0x62, 0x24, 0x0f, 0x23, 0x95, 0xca,
	0x65, 0xfd, 0x15, 0xf3, 0x59, 0x86, 0x59, 0x37, 0x59, 0x21, 0xc8, 0x2e, 0x04, 0x3c, 0x8a, 0x26,
	0x0b, 0x4c, 0xeb, 0x31, 0x9f, 0x47, 0xd1, 0x79, 0x05, 0x97, 0x98, 0xb8, 0x80, 0x17, 0x15, 0xbc,
	0xa5, 0xc1, 0x0a, 0x5e, 0x3a, 0xa8, 0xf8, 0x6c, 0xb2, 0xa0, 0xf5, 0x02, 0x2a, 0x3e, 0x3b, 0xaf,
	0xe0, 0x92, 0x36, 0x56, 0xf0, 0xa2, 0x82, 0xb7, 0xb4, 0xb9, 0x82, 0x97, 0xe4, 0x25, 0x34, 0xac,
	0x4a, 0x27, 0x53, 0x29, 0x68, 0x0b, 0x71, 0xdd, 0xaa, 0x74, 0x20, 0x05, 0x79, 0x07, 0x6d, 0x67,
	0xdc, 0xe8, 0xd8, 0xf2, 0x99, 0xa0, 0x80, 0x26, 0x58, 0x95, 0xfe, 0x2c, 0x08, 0x79, 0x05, 0x4d,
	0x2e, 0xcd, 0xc4, 0x0a, 0x95, 0xd2, 0x36, 0xba, 0x0d, 0x2e, 0xcd, 0x99, 0x50, 0xa9, 0x0b, 0xea,
	0xac, 0x79, 0xae, 0x68, 0xa7, 0x08, 0xca, 0xa5, 0x39, 0xc9, 0x15, 0x79, 0x01, 0xee, 0x34, 0x31,
	0x73, 0xba, 0x89, 0x3c, 0xe0, 0xd2, 0xb0, 0x39, 0x79, 0x0d, 0xad, 0x58, 0xce, 0xe6, 0x76, 0x12,
	0xe7, 0x0b, 0xba, 0x85, 0x4e, 0x13, 0xc1, 0x28, 0x5f, 0x10, 0x0a, 0x8d, 0xab, 0xdc, 0x5a, 0x9d,
	0x64, 0xf4, 0x19, 0xf6, 0xad, 0x92, 0xe4, 0x0d, 0xb4, 0x74, 0x14, 0xe5, 0x29, 0x4f, 0xa2, 0x25,
	0xdd, 0xc6, 0x6b, 0x6b, 0xd0, 0xfb, 0x5b, 0x83, 0xdd, 0x6a, 0x28, 0x87, 0x6c, 0x24, 0x93, 0xeb,
	0xd0, 0x72, 0x8b, 0xb7, 0x0e, 0xf9, 0xf4, 0xd8, 0x70, 0x25, 0xb2, 0x72, 0x40, 0x6b, 0x40, 0xde,
	0x02, 0x8c, 0x74, 0x66, 0x4b, 0x7b, 0x03, 0xed, 0x3b, 0x84, 0x7c, 0x80, 0xed, 0x81, 0xd1, 0xe9,
	0x37, 0x6d, 0x8f, 0x74, 0x92, 0x88, 0xc8, 0x8a, 0x69, 0xb9, 0x2f, 0x8f, 0x38, 0xf9, 0x08, 0x3b,
	0x61, 0xae, 0x42, 0x5c, 0x39, 0x26, 0x22, 0x21, 0x6f, 0xc4, 0x14, 0x07, 0xea, 0xb3, 0xc7, 0x06,
	0xd9, 0x07, 0x12, 0xe6, 0x6a, 0xa0, 0x15, 0x97, 0xc9, 0xb1, 0x36, 0xbf, 0xb9, 0x99, 0x8a, 0x29,
	0x8e, 0xda, 0x67, 0x4f, 0x38, 0xe4, 0x13, 0xec, 0x3a, 0xfa, 0xb0, 0x98, 0x3a, 0x5e, 0x78, 0xca,
	0x2a, 0xeb, 0x29, 0xe2, 0xac, 0xea, 0x69, 0xac, 0xea, 0xb9, 0x6f, 0x94, 0xf5, 0x14, 0x45, 0xae,
	0xeb, 0x69, 0xae, 0xea, 0x79, 0xe0, 0x90, 0x2e, 0xb4, 0xc7, 0xf9, 0x55, 0x2c, 0xb3, 0xf9, 0xf7,
	0x6b, 0xbe, 0xc4, 0x6d, 0xf2, 0xd9, 0x5d, 0x44, 0x7a, 0xd0, 0x29, 0xe5, 0x57, 0x63, 0xb4, 0xc1,
	0x9d, 0xf2, 0xd9, 0x3d, 0xd6, 0xfb, 0xe7, 0xc1, 0xce, 0x7a, 0x6a, 0xa7, 0x22, 0xcb, 0xdc, 0xae,
	0xed, 0x41, 0x3d, 0x34, 0xd1, 0xe9, 0x97, 0x23, 0x1c, 0x58, 0x8b, 0x95, 0xca, 0xbd, 0xa8, 0xd0,
	0x44, 0xc3, 0x71, 0xf5, 0x8e, 0x51, 0x38, 0x3a, 0xd6, 0xe9, 0x70, 0x80, 0x83, 0x69, 0xb1, 0x42,
	0xb8, 0x3d, 0x1a, 0xeb, 0xf4, 0xcc, 0x3d, 0x4b, 0x37, 0x83, 0x1a, 0xab, 0xa4, 0x8b, 0x7e, 0xc8,
	0xd0, 0x08, 0xd0, 0x28, 0x95, 0xfb, 0x1f, 0xb0, 0x30, 0x1c, 0x62, 0x4b, 0x03, 0x86, 0x67, 0xb2,
	0x0d, 0xb5, 0xd1, 0x8f, 0x21, 0x76, 0x2d, 0x60, 0xee, 0x88, 0x71, 0xf9, 0x32, 0xd6, 0xbc, 0x68,
	0x4e, 0x87, 0x55, 0xf2, 0xaa, 0x8e, 0x7f, 0x8b, 0x83, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e,
	0x5f, 0x8a, 0xb2, 0xad, 0x04, 0x00, 0x00,
}
